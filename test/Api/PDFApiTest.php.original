<?php
/**
 * PDFApiTest
 * PHP version 5
 *
 * @category Class
 * @package  FormAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API v1
 *
 * FormAPI is a service that helps you fill out and sign PDF templates.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace FormAPI;

use \FormAPI\Configuration;
use \FormAPI\ApiException;
use \FormAPI\ObjectSerializer;

/**
 * PDFApiTest Class Doc Comment
 *
 * @category Class
 * @package  FormAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class PDFApiTest extends \PHPUnit_Framework_TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass()
    {
      // Configure HTTP basic authorization: api_token_basic
      $config = FormAPI\Configuration::getDefaultConfiguration()
                    ->setUsername('api_token123')
                    ->setPassword('testsecret123')
                    ->setHost('api.formapi.local:31337')
                    ->setScheme('http');
      $apiInstance = new FormAPI\Api\PDFApi(
          // If you want use custom http client, pass your client which implements `GuzzleHttp\ClientInterface`.
          // This is optional, `GuzzleHttp\Client` will be used as default.
          new GuzzleHttp\Client(),
          $config
      );
    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {
    }

    /**
     * Test case for batchGeneratePdfV1
     *
     * Generates multiple PDFs.
     *
     */
    public function testBatchGeneratePdfV1()
    {
      $template_id = tpl_000000000000000001; // string | 
      $request_body = array(new \FormAPI\Model\array()); // object[] | 
      $result = $apiInstance->batchGeneratePdfV1($template_id, $request_body);
    }

    /**
     * Test case for batchGeneratePdfs
     *
     * Generates multiple PDFs.
     *
     */
    public function testBatchGeneratePdfs()
    {
      $submission_batch_data = new \FormAPI\Model\SubmissionBatchData(); // \FormAPI\Model\SubmissionBatchData | 
      $result = $apiInstance->batchGeneratePdfs($submission_batch_data);
    }

    /**
     * Test case for combinePdfs
     *
     * Merge submission PDFs, template PDFs, or custom files.
     *
     */
    public function testCombinePdfs()
    {
      $combine_pdfs_data = new \FormAPI\Model\CombinePdfsData(); // \FormAPI\Model\CombinePdfsData | 
      $result = $apiInstance->combinePdfs($combine_pdfs_data);
    }

    /**
     * Test case for combineSubmissions
     *
     * Merge generated PDFs together.
     *
     */
    public function testCombineSubmissions()
    {
      $combined_submission_data = new \FormAPI\Model\CombinedSubmissionData(); // \FormAPI\Model\CombinedSubmissionData | 
      $result = $apiInstance->combineSubmissions($combined_submission_data);
    }

    /**
     * Test case for createCustomFileFromUpload
     *
     * Create a new custom file from a cached presign upload.
     *
     */
    public function testCreateCustomFileFromUpload()
    {
      $create_custom_file_data = new \FormAPI\Model\CreateCustomFileData(); // \FormAPI\Model\CreateCustomFileData | 
      $result = $apiInstance->createCustomFileFromUpload($create_custom_file_data);
    }

    /**
     * Test case for createDataRequestToken
     *
     * Creates a new data request token for form authentication.
     *
     */
    public function testCreateDataRequestToken()
    {
      $data_request_id = drq_000000000000000001; // string | 
      $result = $apiInstance->createDataRequestToken($data_request_id);
    }

    /**
     * Test case for createFolder
     *
     * Create a folder.
     *
     */
    public function testCreateFolder()
    {
      $create_folder_data = new \FormAPI\Model\CreateFolderData(); // \FormAPI\Model\CreateFolderData | 
      $result = $apiInstance->createFolder($create_folder_data);
    }

    /**
     * Test case for createTemplate
     *
     * Upload a new PDF template with a file upload.
     *
     */
    public function testCreateTemplate()
    {
      $template_document = "/path/to/file.txt"; // \SplFileObject | 
      $template_name = 'template_name_example'; // string | 
      $template_parent_folder_id = 'template_parent_folder_id_example'; // string | 
      $result = $apiInstance->createTemplate($template_document, $template_name, $template_parent_folder_id);
    }

    /**
     * Test case for createTemplateFromUpload
     *
     * Create a new PDF template from a cached presign upload.
     *
     */
    public function testCreateTemplateFromUpload()
    {
      $create_template_data = new \FormAPI\Model\CreateTemplateData(); // \FormAPI\Model\CreateTemplateData | 
      $result = $apiInstance->createTemplateFromUpload($create_template_data);
    }

    /**
     * Test case for deleteFolder
     *
     * Delete a folder.
     *
     */
    public function testDeleteFolder()
    {
      $folder_id = fld_000000000000000001; // string | 
      $result = $apiInstance->deleteFolder($folder_id);
    }

    /**
     * Test case for expireCombinedSubmission
     *
     * Expire a combined submission.
     *
     */
    public function testExpireCombinedSubmission()
    {
      $combined_submission_id = com_000000000000000001; // string | 
      $result = $apiInstance->expireCombinedSubmission($combined_submission_id);
    }

    /**
     * Test case for expireSubmission
     *
     * Expire a PDF submission.
     *
     */
    public function testExpireSubmission()
    {
      $submission_id = sub_000000000000000001; // string | 
      $result = $apiInstance->expireSubmission($submission_id);
    }

    /**
     * Test case for generatePDF
     *
     * Generates a new PDF.
     *
     */
    public function testGeneratePDF()
    {
      $template_id = tpl_000000000000000001; // string | 
      $submission_data = new \FormAPI\Model\SubmissionData(); // \FormAPI\Model\SubmissionData | 
      $result = $apiInstance->generatePDF($template_id, $submission_data);
    }

    /**
     * Test case for getCombinedSubmission
     *
     * Check the status of a combined submission (merged PDFs).
     *
     */
    public function testGetCombinedSubmission()
    {
      $combined_submission_id = com_000000000000000001; // string | 
      $result = $apiInstance->getCombinedSubmission($combined_submission_id);
    }

    /**
     * Test case for getDataRequest
     *
     * Look up a submission data request.
     *
     */
    public function testGetDataRequest()
    {
      $data_request_id = drq_000000000000000001; // string | 
      $result = $apiInstance->getDataRequest($data_request_id);
    }

    /**
     * Test case for getPresignUrl
     *
     * Get a presigned URL so that you can upload a file to our AWS S3 bucket.
     *
     */
    public function testGetPresignUrl()
    {
      $result = $apiInstance->getPresignUrl();
    }

    /**
     * Test case for getSubmission
     *
     * Check the status of a PDF.
     *
     */
    public function testGetSubmission()
    {
      $submission_id = sub_000000000000000001; // string | 
      $include_data = false; // bool | 
      $result = $apiInstance->getSubmission($submission_id, $include_data);
    }

    /**
     * Test case for getSubmissionBatch
     *
     * Check the status of a submission batch job.
     *
     */
    public function testGetSubmissionBatch()
    {
      $submission_batch_id = sbb_000000000000000001; // string | 
      $include_submissions = true; // bool | 
      $result = $apiInstance->getSubmissionBatch($submission_batch_id, $include_submissions);
    }

    /**
     * Test case for getTemplate
     *
     * Get a single template.
     *
     */
    public function testGetTemplate()
    {
      $template_id = tpl_000000000000000011; // string | 
      $result = $apiInstance->getTemplate($template_id);
    }

    /**
     * Test case for getTemplateSchema
     *
     * Fetch the JSON schema for a template.
     *
     */
    public function testGetTemplateSchema()
    {
      $template_id = tpl_000000000000000001; // string | 
      $result = $apiInstance->getTemplateSchema($template_id);
    }

    /**
     * Test case for listFolders
     *
     * Get a list of all folders.
     *
     */
    public function testListFolders()
    {
      $parent_folder_id = fld_000000000000000002; // string | Filter By Folder Id
      $result = $apiInstance->listFolders($parent_folder_id);
    }

    /**
     * Test case for listTemplates
     *
     * Get a list of all templates.
     *
     */
    public function testListTemplates()
    {
      $query = 2; // string | Search By Name
      $parent_folder_id = fld_000000000000000001; // string | Filter By Folder Id
      $page = 2; // int | Default: 1
      $per_page = 1; // int | Default: 50
      $result = $apiInstance->listTemplates($query, $parent_folder_id, $page, $per_page);
    }

    /**
     * Test case for moveFolderToFolder
     *
     * Move a folder.
     *
     */
    public function testMoveFolderToFolder()
    {
      $folder_id = fld_000000000000000001; // string | 
      $move_folder_data = new \FormAPI\Model\MoveFolderData(); // \FormAPI\Model\MoveFolderData | 
      $result = $apiInstance->moveFolderToFolder($folder_id, $move_folder_data);
    }

    /**
     * Test case for moveTemplateToFolder
     *
     * Move Template to folder.
     *
     */
    public function testMoveTemplateToFolder()
    {
      $template_id = tpl_000000000000000001; // string | 
      $move_template_data = new \FormAPI\Model\MoveTemplateData(); // \FormAPI\Model\MoveTemplateData | 
      $result = $apiInstance->moveTemplateToFolder($template_id, $move_template_data);
    }

    /**
     * Test case for renameFolder
     *
     * Rename a folder.
     *
     */
    public function testRenameFolder()
    {
      $folder_id = fld_000000000000000001; // string | 
      $rename_folder_data = new \FormAPI\Model\RenameFolderData(); // \FormAPI\Model\RenameFolderData | 
      $apiInstance->renameFolder($folder_id, $rename_folder_data);    }

    /**
     * Test case for testAuthentication
     *
     * Test Authentication.
     *
     */
    public function testTestAuthentication()
    {
      $result = $apiInstance->testAuthentication();
    }

    /**
     * Test case for updateDataRequest
     *
     * Update a submission data request.
     *
     */
    public function testUpdateDataRequest()
    {
      $data_request_id = drq_000000000000000001; // string | 
      $update_submission_data_request_data = new \FormAPI\Model\UpdateSubmissionDataRequestData(); // \FormAPI\Model\UpdateSubmissionDataRequestData | 
      $result = $apiInstance->updateDataRequest($data_request_id, $update_submission_data_request_data);
    }
}
